#!/usr/bin/python3
# This program was made by VBPROGER.
# Link: https://github.com/VBPROGER/pyeasyclean
"""
MIT License

Copyright (c) 2022 VB PROGER

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

try:
    import argparse, os, shutil, getpass
except ImportError:
    print('Library importion error, "getpass", "shutil" and "argparse" are required lib(s)!')
    exit(1)
except BaseException:
    print('Error!')
    exit(2)

def checkblacklist(file: str):
    zzzz = [
    'xapp-tmp-', '.com.google.',
    'ssh-', 'mintUpdate', 'config-err-'
    'xapp-tmp-', '.com.google.', 'ssh-',
    'flatpak-cache-', 'hsperfdata_',
    'ksycoca', '.fr-', 'plasma_',
    '.flatpak', 'mozilla', 'mc', 'thumbnails',
    'pip', 'mesa_shader', 'fontconfig', 'dbus',
    'meow.bak' # New!
    ]
    for x in zzzz:
        if str(file).startswith(str(x)): return True
    return False

def cls():
    os.system('clear || cls || :')
def scan(folder_path: str):
    files_found = 0
    removed_files = 0
    failed_to_remove = 0
    for file in os.listdir(str(folder_path)):
        if checkblacklist(file):
            file = str(file)
            print('Found unused file: '+file)
            print('Deleting file: '+file)
            try:
                try:
                    os.remove(str(folder_path)+'/'+file)
                    print('Deleted file: '+file)
                except IsADirectoryError:
                    shutil.rmtree(str(folder_path)+'/'+file, ignore_errors=True)
                    print('Deleted folder: '+file)
                removed_files =+ 1
            except Exception as e:
                print('Failed to delete file: '+file)
                print('Error code: '+str(e))
                failed_to_remove =+ 1
            files_found =+ 1
    return files_found, removed_files, failed_to_remove
def scan_tmp_folders():
    files_found = 0
    removed_files = 0
    try:
        files_found, removed_files, failed_to_remove = scan('/tmp')
        files_found, removed_files, failed_to_remove = scan('/var/tmp')
        files_found, removed_files, failed_to_remove = scan('/etc/tmpfiles.d')
        files_found, removed_files, failed_to_remove = scan('/run/log')
        files_found, removed_files, failed_to_remove = scan(f'/home/{str(getpass.getuser())}/.cache')
        files_found, removed_files, failed_to_remove = scan(f'/root/.cache')
    except BaseException:
        pass
    if files_found != 0 or removed_files != 0 or failed_to_remove != 0:
        print('Found '+str(files_found)+' file(s) / folder(s), '+str(removed_files)+' file(s) / folder(s) removed, and '+str(failed_to_remove)+' file(s) failed to remove.')
    else:
        print('Nothing found to remove. Your PC is cleaned!')

description='''PyEasyClean is advanched tool\n
to clear your cache and heal computer.'''
parser = argparse.ArgumentParser(description=description)
parser.add_argument("-clean", help = "Clears unused things from temporary and cache folder(s)", required=False, type=str, nargs="*")
parser.add_argument("-cls", help = "Clears console", required=False, nargs="*")
args = parser.parse_args()
if args.clean:
    print("Scanning & cleaning tmp all folders...")
    scan_tmp_folders()
elif args.cls:
    cls()
else:
    parser.print_help()
